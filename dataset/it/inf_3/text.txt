Введение
Существующие на данный момент автоматизированные интеллектуальные системы обработки
данных не позволяют в полной мере охватить и качественно проанализировать накопленные большие
массивы гетерогенной информации. В контексте организации структур для хранения и обработки гетерогенных данных возможно различное понимание свойства гетерогенности. Физическая гетерогенность означает различные типы информации, форматы данных, подходы к цифровому представлению
или используемым моделям, например, типов баз данных. Неоднородность представления данных
обусловлена постоянным накоплением информационного фонда из различных источников и намерением последующего его использования для решения кардинально разных задач. В качестве гетерогенных данных могут выступать текстовые файлы, аудио-, видеоматериалы, графики, рисунки, таблицы,
коды программ, диаграммы, схемы и т.д. Также гетерогенность может быть семантической, подразумевающей главные различия в названиях, значениях, смысловой наполненности информации [1].
При анализе больших массивов информации надо учитывать оба вида гетерогенности данных.
В различных практических задачах в рамках одной базы данных могут иметь значение как один, так
и оба вида гетерогенности. В случае физической гетерогенности в первую очередь необходимо решить вопрос о способах обработки и методах поиска, при семантической – о формулировке запросов,
методах выборки обрабатываемых массивов, способах индексации.
Механизмы работы поисковых роботов отличаются от логики человеческого мышления, в этой
связи формулировка запросов, при выполнении которой находится релевантная информация, – это
сложная задача, требующая для своего решения специальных инструментов [2]. Контекстно-логические
конструкторы запросов показывают хорошие результаты при обработке гетерогенных данных, так
как являются инструментом составления частично формализованных запросов, который сохраняет
интуитивно понятный интерфейс и естественную логику [3].
1. Методы структурирования, хранения и анализа гетерогенной информации
Основная задача структурирования и разработки методов обработки гетерогенных массивов
данных – это обеспечение возможности их интеграции. Интеграция означает возможность работать
с информацией как с единым массивом данных, обладающим целостностью, реализацию возможности для пользователя работать с данными как с единым информационным пространством [4]. Методы обработки гетерогенной информации можно разделить на две большие группы. К первой относится обработка запросов по каждой категории информации отдельно. Это позволяет использовать стандартные системы обработки данных в соответствии с их видом. Однако серьезным
недостатком такого подхода являются трудности с объединением результатов обработки по подсистемам. Вторая группа методов – преобразование гетерогенных потоков к общему виду и последующая единая обработка по всей системе. Основными недостатками такого подхода являются ресурсоемкость преобразования информации и сложность учета особенностей каждого из рассматриваемых
видов информации [5]. При использовании разрабатываемого контекстно-логического конструктора
запросов используется второй метод: все поступающие данные в различных форматах преобразуются
в единый текстовый формат.
2. Принципы построения контекстно-логического конструктора запросов
Разработанный прототип контекстно-логического конструктора универсален и может быть
применен в различных системах анализа и обработки информации: мониторинге информационного
пространства, анализе записей аудио- и видеоразговоров, анализе научных документов, стенограмм
конференций, обработке архивов и т.д. Для обеспечения такой универсальности сформулированы
ключевые принципы работы конструктора: модульность, инкапсуляция и эргономичность.
Модульность обеспечивает возможность неограниченного масштабирования сложности поисковых запросов путем комбинации атомарных поисковых запросов с использованием логических
операторов. При обработке большого количества разнородных элементов иногда необходимо объединение большого количества правил для получения именно тех результатов, которые необходимы
пользователю. При формировании длинных запросов их можно сохранять как шаблоны и потом изменять только необходимую часть, например для поиска по определенным критериям разных фраз из
уже отобранной ранее категории документов.
Инкапсуляция позволяет обеспечить несколько уровней вложенности при создании элементов
поисковых запросов; например, внутри одного из элементов можно использовать несколько различных контекстных правил, объединенных различными логическими операторами. Такие запросы часто
формируются при поэтапном приближении к релевантным результатам путем уточнения запросов и
поиска по найденным в предыдущих итерациях результатам.
Эргономичность облегчает создание и редактирование запросов через графический интерфейс,
когда поисковый запрос формируется «на лету» в несколько кликов без необходимости программирования или сложных ручных операций. На практике эргономичность является одним из важнейших
критериев для практического применения новых разработок, так как пользователи чаще всего не смогут оценить качество работы поискового робота, если будут испытывать сложности при использовании графического интерфейса.
Конструктор запросов предназначен для создания точных поисковых запросов к базе данных
текстов. С помощью конструктора эксперт может выделить в массиве текстов интересующую его
комбинацию слов и терминов, а также получить статистические данные о доле текстов, соответствующих поисковому критерию, в общей базе.
3. Этапы обработки гетерогенной информации для работы с конструктором запросов
Обработка документов состоит из нескольких этапов (рис. 1), только на последнем этапе пользователь непосредственно работает с прототипом конструктора запросов, все остальные этапы являются подготовительными.
Первый этап. Осуществляется загрузка коллекции документов из источников данных. Это могут быть как структурированные базы данных или разделы баз данных, так и неструктурированные
коллекции документов, в том числе полученные в результате автоматизированного распознавания
речи или изображений. Производится проверка времени изменения документов. На первом этапе работы алгоритма текстовые документы индексируются и сохраняются на сервере в виде бинарных
документов, оптимизированных для последующего парсинга. Метаданные документов сохраняются
в таблицу внутри базы данных с указанием уникального идентификатора документа и ключевых метаданных (автор документа, дата, источник, ключевые слова и др.). Второй этап. Все документы проходят подготовительную обработку. Цель такой обработки –
очищение документа от данных, не нуждающихся в обработке, стемминг слов, т.е. поиск основы слова
независимо от того, совпадает ли она с морфологическим корнем. Формирование структуры слово–
позиция. Данный процесс также необходим для сокращения объема поискового индекса и способствует увеличению скорости поиска. На этом же этапе эксперт определяет словари: список слов и
фраз, которые ему интересны с точки зрения содержания документов. Данные словари могут быть
импортированы из уже существующего глоссария или базы знаний.
На третьем этапе тексты, загруженные в систему, анализируются на предмет наличия в них
слов и фраз, входящих в созданные экспертом словари, с учетом словоформ. Так, например, если
в словарь входит слово «атом», то в текстах будут найдены все формы данного слова («атома», «атомы» и др.). В случае обнаружения слова в тексте информация об этом сохраняется в отдельную таблицу, представляющую собой индекс для дальнейшего быстрого поиска по документам. При добавлении в словарь новых слов в фоновом режиме автоматически строится исторический индекс. Глубина
индекса определяется настройками системы.
Четвертый, завершающий этап представляет собой непосредственно работу пользователя с конструктором запросов. При тестировании поиска в качестве запросов использовались следующие типы: информационный (поиск общей информации независимо от тематической направленности);
транзакционный (поиск группы документов по определенным критериям); навигационный (поиск
конкретного ресурса, обладающего заданными характеристиками). Подробнее работа пользователя
с формальным контекстно-логическим конструктором запросов описана в следующем разделе [6]. 4. Пользовательский интерфейс
Интерфейс прототипа конструктора запросов представляет собой набор взаимосвязанных форм,
на которых отражены основные функции, операторы и правила. Запросы формируются в наглядной
форме, все элементы форм предназначены для быстрого и удобного выбора существующих запросов
или для создания новых.
В первой форме пользователю предлагается выбрать запрос из наиболее часто используемых
в библиотеке запросов (рис. 2.). Предполагается, что при регулярной работе с системой в большинстве случаев использовать готовые запросы или формировать новые на основе существующих удобнее и быстрее, чем создавать запросы заново. Необходимый запрос можно выбрать в один клик. Выбранный запрос выделяется цветом. Также есть возможность перейти к полному списку доступных
пользователю запросов. При создании новых запросов или модернизации существующих ключевой функцией является
добавление новых блоков; каждый блок включает в себя указание логической связки (И / ИЛИ),
наличие или отсутствие отрицания, а также конкретное контекстное правило (ПРИСУТСТВУЕТ,
ОТСУТСТВУЕТ, ОКОЛО, НАЧАЛО, ОКОНЧАНИЕ) (рис. 3.).
В рамках запроса на первом этапе необходимо выбрать одно из контекстных правил, после чего
пользователь вводит параметры для конкретного правила, а также выбирает, активировать или нет
оператор отрицания. Активация отрицания в запросе происходит путем отметки в чек-боксе. Для добавления правила или оператора пользователь использует контекстное меню, которое также позволяет производить базовые операции с уже имеющимися в запросе правилами (вырезать, вставить, удалить). Одним из наиболее эффективных контекстных правил является правило ОКОЛО, позволяющее искать в текстах события, связанные друг с другом. Расстояние между словами может указываться,
например, в секундах (для аудиозаписи разговора) или в количестве слов (для текстовых документов)
(рис. 4.). Остальные правила в прототипе проверяют наличие или отсутствие слов. На рис 5 ниже приведен интерфейс использования логических правил И / ИЛИ. С их помощью можно указать взаимозаменяемые синонимичные конструкции, в случае если пользователь не знает точной формулировки
фраз в искомых документах. Согласно указанным принципам запросы можно объединять.
Прототип предполагает возможность поиска по словарям, а также по формам слов. В случае
диалоговой речи (например, чат) прототип также предполагает опцию поиска в тексте конкретного
участника диалога. Сформированный запрос сохраняется в каталог запросов. По результатам выполнения любого поискового запроса пользователь может просмотреть список документов, в которых
найдены участки текста по соответствующим запросам, сами участки текста, собрать статистические
данные по документам, соответствующим поисковым критериям, например число таких документов
по отношению к общему числу документов в категории. Заключение
Рассмотренные особенности работы с гетерогенными данными требуют разработки специфических инструментов для систематизации множества информационных объектов и поиска релевантных
документов в массиве информации. Использование контекстно-логического конструктора запросов
позволит учитывать морфологическую и синтаксическую вариативность текстов, упростить поиск по
документам, в значительной степени автоматизировать классификацию и тем самым повысить скорость и качество работы эксперта с базой. В статье рассмотрены этапы работы системы обработки
документов с использованием прототипа формального контекстно-логического конструктора запросов для точного поиска событий в тексте, общая схема обработки документов и создания хранилища
метаданных. Прототип строится на основе принципов модульности, эргономичности и инкапсуляции,
что обеспечивает его гибкость и адаптивность к большому числу практических задач. Рассмотрены
основные структурные и интерфейсные особенности разработанного прототипа.
