Диаграммы и различного рода схемы применяются в самых различных областях: при проектировании и разработке ПО, анализе требований, в радиофизике, математике. Кроме того, нередко над
одной и той же диаграммой работают несколько людей одновременно (например, при проектировании ПО), а синхронизация с помощью пересылки файлов или с использованием системы контроля
версий зачастую сводит преимущества от совместной работы к нулю. Подобное программное обеспечение для совместного редактирования с синхронизацией в режиме реального времени получает
все большее распространение в последнее время, в связи с чем растут и требования к подобным системам. Для систем совместного редактирования диаграмм важным свойством является расширяемость – возможность добавлять функционал в систему без изменения ее исходного кода. Вторым немаловажным свойством является кроссплатформенность, т.е. возможность написания клиентского
приложения (клиента) под любую платформу. Реализация системы, удовлетворяющей одновременно
свойствам расширяемости и кроссплатформенности, связана с определенными техническими трудностями. В [1] описана концепция системы совместного редактирования, удовлетворяющая данным
требованиям. В настоящей работе представлено более детальное описание самой концепции.
В области разработки систем совместного редактирования имеется достаточно большое число
различных решений. Рассмотрим самые популярные и крупные системы совместного редактирования
в аспекте соответствия перечисленным выше свойствам:
1. Документы Google [2] – это веб-ориентированный онлайн-сервис, включающий в себя текстовый и табличный процессор, инструмент для создания презентаций, а также облачное хранилище.
Система поддерживает многопользовательское совместное редактирование, однако основным недостатком является очень скудная поддержка редактирования диаграмм без возможности расширения.
2. Google Wave – веб-ориентированный онлайн-сервис для взаимодействия и совместной работы. Система поддерживала совместную работу с форматированным текстом, фотографиями, видео,
простыми графическими примитивами. С 30 апреля 2012 г. сервис прекратил свою работу [3].
3. Различные веб-ориентированные сервисы редактирования диаграмм, например LucidCharts
[4] или Cacoo [5]. Системы предоставляют возможность многопользовательского совместного редактирования, централизованное хранилище, достаточно активно поддерживаются и развиваются (создаются новые типы диаграмм и элементов, совершенствуется пользовательский интерфейс). Основным недостатком является ориентированность на конкретную клиентскую платформу (веб) и отсутствие поддержки формальной модели редактируемых диаграмм, что можно было бы использовать
для поддержки целостной модели проекта). 4. VisualParadigm [6] – мощный инструмент проектирования, обладающий следующими преимуществами: реализация клиентского приложения на языке Java, что позволяет работать на большом числе платформ, поддержка формальной модели редактируемых диаграмм, генерации кода, а
также обратного проектирования, расширяемая модель. Основные недостатки: отсутствие совместного редактирования диаграмм с синхронизацией в режиме реального времени, отсутствие поддержки
JVM на некоторых современных платформах (например, iOS).
Разрабатываемая авторами система Obordesus спроектирована таким образом, чтобы удовлетворять заявленным выше требованиям расширяемости и кроссплатформенности. В настоящей работе представлены архитектурно значимые решения, принятые при создании системы.
1. Свойства системы
Obordesus [1] – централизованная система совместного редактирования диаграмм с синхронизацией в режиме реального времени. Ее ключевые свойства:
1. Многопользовательская работа с диаграммами – возможность одновременного доступа нескольких участников проекта к одной диаграмме.
2. Синхронизация диаграмм в режиме реального времени – изменения, вносимые одним участником, сразу же отображаются у других участников, редактирующих тот же документ.
3. Расширяемость – возможность добавления функционала к системе без переработки самой
системы.
4. Кроссплатформенность – возможность реализации клиентского приложения под любую
платформу.
5. Устойчивость клиентского приложения к изменению функционала системы – расширение
функционала не требует внесения изменений в клиентские приложения.
6. Централизованность – доступ к документам, созданным с помощью системы, осуществляется
через единую глобальную точку, обеспечивая таким образом их повсеместную оперативную доступность.
2. Модель предметной области
Основным элементом предметной области (рис. 1) является диаграмма (объект Document). Диаграммы представляют собой набор визуальных элементов (объект ViewItem), которые являются образами некоторых моделируемых сущностей (объект ModelItem). Моделируемую сущность также будем называть моделью элемента, а его визуальный образ – представлением элемента. Стоит отметить,
что несколько визуальных элементов могут представлять одну и ту же модель.
Элементы диаграммы могут быть связаны между собой (например, классы в языке UML [7] могут быть связаны между собой ассоциацией). Связи между элементами рассматриваются как отдельные элементы, которые также имеют свою модель и представление. Модель в данном случае определяет, какие элементы связаны, а представление – как эта связь отображается.
Диаграммы объединяются в проекты (объект Project). Совокупность всех моделей элементов
проекта является моделью проекта, а совокупность диаграмм – представлением проекта. 3. Универсальное представление элементов
Одной из задач клиент-серверного взаимодействия [8] в разрабатываемой системе совместного
редактирования диаграмм является обеспечение возможности расширения функционала без необходимости модификации клиентских приложений. С учетом требования кроссплатформенности, реализовывать модуль расширения с новым функционалом для каждого клиента слишком затратно. Кроме
того, ограничением при выборе решения является также и тот факт, что взаимодействие происходит
через сеть, а значит, присутствует некоторая задержка между совершением действия пользователем и
реакцией сервера на это действие.
Таким образом, механизм клиент-серверного взаимодействия должен удовлетворять следующим требованиям:
1. Отображение произвольных элементов. Единственным ограничением является набор примитивов, из которых потом будет строиться представление элемента. Этот набор должен быть фиксирован при разработке и быть достаточно полным для представления любых графических элементов.
2. Синхронизация данных между клиентами и сервером. Интерфейс для обмена данными должен быть достаточно абстрактным, чтобы оставаться устойчивым к расширению функционала. Кроме того, особое внимание при проектировании механизма синхронизации необходимо уделять конфликтам синхронизации, вероятность которых очень высока при одновременном редактировании.
3. Взаимодействие пользователя с элементами и элементов между собой. Эта задача появляется
из-за ограничения, накладываемого сетевым взаимодействием, так как постоянно присутствует некоторая задержка (до нескольких секунд), во время которой клиент работает самостоятельно, не получая отклика от сервера. В таком случае недостаточно просто уметь отображать элементы, необходимо дублировать взаимодействие между ними на стороне клиента.
Для удовлетворения этим требованиям предлагается следующее высокоуровневое решение
(рис. 2): объектная модель, в которой работают клиентские приложения (Client Object Model), должна
опираться не непосредственно на серверную объектную модель (Object Model), а на некоторую промежуточную модель описания представления (Presentation Description Model). Обучение клиента новым типам элементов происходит следующим образом:
1. На сервере генерируется (либо берется готовое) описание представления нового типа элементов.
2. Описание представления доставляется на клиента.
3. Клиент по определенному заранее алгоритму строит свою объектную модель этого типа элементов. Такое решение позволяет:
1) только один раз реализовать серверную модель;
2) только один раз специфицировать протокол взаимодействия и модель описания представления;
3) для каждой клиентской платформы реализовать модуль преобразования из модели описания
представления в объектную модель конкретного клиентского приложения.
В рамках предложенного решения достигается выполнение всех поставленных требований:
1. Отображение произвольных элементов обеспечивается универсальностью модели описания
представления.
2. Синхронизация между клиентом и севером (Client Controller и Project Controller через
Communication Gateway) происходит по заранее определенному протоколу в терминах серверной объектной модели, на основе которой построены остальные модели, что позволяет реализовать универсальный механизм синхронизации данных безотносительно к особенностям конкретных элементов.
3. Взаимодействие пользователя с элементами и элементов между собой достигается с помощью особенностей модели описания представления (подробнее см. раздел 7).
5. Применение существующих технологий
В данном разделе приводится обзор существующих технологий, являющихся кандидатами для
реализации предложенного решения. Во-первых, существует некоторое количество языков разметки
визуальных графических элементов, например SVG [9], VML [10] и др. При использовании этих языков в чистом виде возникают следующие проблемы:
1. Невозможно задать связь представления, описанного с помощью разметки, с серверной моделью.
2. Отсутствие алгоритмической составляющей для организации взаимодействия пользователя с
элементами и задания сложной логики представления элементов.
Среди языков разметки интерфейсов существуют решения, позволяющие решить первую проблему (XAML [11], механизм DataBinding [12]), однако в них тоже очень слабо развита алгоритмическая составляющая. Но несмотря на то, что ни один из языков нельзя использовать непосредственно,
разумно выделить из них удачные решения и использовать их для задания представления элементов.
Другим вариантом является использование какого-либо скриптового языка (JavaScript, Python)
либо языка, исполняемого на виртуальной машине (Java байт-код). Недостатки такого решения:
1. Существуют реализации интерпретаторов (Java-машины в случае с Java) не под все платформы, а сложность реализации интерпретатора любого из таких языков неоправданно высока.
2. Необходимость серьезно ограничивать возможности языка, так как все они являются языками программирования общего назначения, для системы же необходим узкоспециализированный
язык. Трудоемкость реализации такого ограничения (особенно при использовании сторонних компонентов для интерпретации) может быть также неоправданно высока.
3. Неудобство использования языков программирования для описания представления. Этот недостаток можно было бы устранить, используя сочетание языка разметки и скриптового языка (пример: HTML+JavaScript), однако это не снимает остальных серьезных ограничений.
Таким образом, более простой в реализации является разработка специального языка описания
представления, который будет включать в себя минимально необходимый набор возможностей. С
одной стороны, это снимет необходимость реализации ограничения функциональности языка, а с
другой – сделает более реальной задачу написания интерпретатора такого языка.
6. Базовые концепции строения элемента диаграммы
По результатам исследования предметной области и функциональных требований к механизму
клиент-серверного взаимодействия приняты следующие базовые концепции описания элементов: 1. Информация об элементах содержится в их свойствах.
2. Представление элемента – это функция от свойств данного элемента и, возможно, других
элементов.
3. Каждый элемент состоит из трех частей: модели данных, визуальной модели и представления.
4. Представление элементов создается с помощью набора примитивов.
Таким образом, имеется следующая структура элемента: элемент состоит из трех частей
(рис. 3), две из которых (Model и VisualModel) являются, по сути, хранилищами значений свойств,
инкапсулируя тем самым всю информацию об элементе. Таким образом, для синхронизации информации достаточно использовать только данные этих двух частей элемента. Третья составная часть
элемента, Presentation, задается с помощью набора примитивов, значения параметров которых вычисляются на основе значений свойств Model и VisualModel. Такое строение элемента идеально согласуется с моделью предметной области (для этого достаточно объединить VisualModel и Presentation в один блок – View). Кроме того, описанные выше
концепции позволяют достичь решения всех трех задач, поставленных перед механизмом клиентсерверного взаимодействия:
1. Отображение произвольных элементов – концептуально нет никаких ограничений на задание
набора свойств и набора примитивов, из которых будет строиться описание элемента, т.е. с помощью
такого механизма можно построить представление любого элемента.
2. Синхронизация данных между клиентами и сервером – механизм синхронизации сводится к
синхронизации свойств Model и VisualModel.
3. Воздействие пользователя на элементы и взаимодействие элементов между собой – фиксированный, заранее определенный набор примитивов позволяет описать указанные сложные взаимодействия в виде обработки параметров этих примитивов с помощью некоторого алгоритмического языка.
7. Модель описания представления
Рассмотрим объектную модель описания представления на высоком уровне (рис. 4). Основным классом является ElementType, представляющий типы элементов, из которых в конечном итоге строится визуальное представление диаграммы. Для типа элемента определяется его
название. Каждый элемент имеет два набора свойств (DataProperty), представляющих свойства модели данных и визуальной модели.
У каждого элемента есть его графическое представление (Presentation), которое имеет свой
набор свойств (PresentationProperty) и строится как композиция атомарных графических элементов
(линий, прямоугольников, текстовых меток и т.п.), представленных наследниками класса
PresentationElement. Некоторые графические элементы могут содержать в себе другие графические
элементы, причем из разных соображений: иногда исключительно для удобства (наследование родительских координат), а иногда по структурной необходимости (ячейки вложены в таблицу).
Каждый графический элемент в свою очередь состоит из набора свойств PresentationProperty.
Представление элемента Presentation можно рассматривать как композитный графический элемент,
что позволяет использовать PresentationProperty для задания свойств как самого представления
Presentation, так и для задания свойств графических элементов.
Для каждого свойства представления (PresentationProperty) задаются 2 функции – get и set.
Функция get не обладает побочными эффектами и должна в любой момент времени возвращать актуальное значение свойства. Функция set необходима для установки нового значения для свойства в
результате действий пользователя и может быть опущена, если свойство не должно редактироваться
через пользовательский интерфейс.
8. Серверная архитектура
В серверной части данной системы используется 5 логически разделённых типов серверов (рис. 5).
1. Root Server (корневой сервер) отвечает за управление серверами и их взаимодействие друг с
другом.
2. Accounts Server (сервер пользователей) отвечает за централизованное управление учетными
записями пользователей.
3. Repository Server (репозиторий) отвечает за централизованное управление проектами.
4. Login Server (сервер аутентификации) – пользовательский шлюз для аутентификации и
управления проектами.
5. Project Server (сервер проектов) отвечает за работу с проектами. Первые три типа серверов составляют управляющую основу серверной части системы и существуют в единственном экземпляре для каждого серверного экземпляра системы. Прямой доступ пользователей к этим серверам не предусмотрен (за исключением администраторов системы). Последние два типа серверов составляют рабочую часть системы и будут горизонтально масштабироваться при необходимости (развертывание системы планируется на базе так называемых облачных
провайдеров, например, Amazon AWS [14], Windows Azure [15]). Пользователи первоначально подключаются к серверу аутентификации, выбор которого происходит автоматически клиентским приложением, затем для работы над конкретными проектами они подключаются к проектному серверу,
который выбирается репозиторием.
Сервер аутентификации позволяет пользователям:
1. Выполнять действия со своим аккаунтом (регистрация, аутентификация, смена учетных данных).
2. Управлять проектами (создание проектов, изменение информации о проектах, предоставление пользователям доступа к проекту, управление лицензиями и т.д.).
Проектный сервер – единственный тип серверов, который работает с серверной расширяемой
объектной моделью предметной области. Расширение этой модели выполняется с помощью архитектурного решения «Plugin» [16] путем подключения модулей расширения (плагинов), в результате чего сервер должен удовлетворять следующим требованиям:
1. Возможность изоляции плагинов от проектного сервера и системы, на которой он запущен.
2. Возможность изоляции проектов друг от друга.
3. Возможность в рамках одного сервера иметь подключенными разные модули (в том числе
одни и те же модули, но разных версий) для каждого запущенного проекта.
Для реализации этих требований используется изоляция на уровне доменов приложения .NET
[17]. Для каждого проекта создается свой домен, в который загружаются только необходимые ему
плагины с минимальными правами в системе. Вся обработка изменений выполняется в домене проекта, исключение составляет сетевое взаимодействие – им занимается сам сервер, передавая запросы
домену с помощью технологии .NET Remoting [18].
10. Серверная объектная модель
Для серверной реализации расширяемой модели предметной области (рис. 6) необходимо реализовать следующие механизмы:
1. Механизм сохранения и загрузки объектов в данной модели.
2. Механизм транзакций для возможности выполнения сложных модификаций объектов данной
модели в рамках транзакций с возможностью отката всех модификаций, если какие-то из них не могут быть применены.
3. Механизм контроля прав доступа к объектам модели. 
Для реализации этих механизмов существует отдельное хранилище данных элемента
(DataStore) (рис. 6), доступ к которому предоставляется через специальные объекты для свойств
(ItemProperty) и коллекций (ItemCollection), которые полностью контролируются системой, что позволяет реализовать все указанные выше особенности.
Заключение
На данный момент система доработана до состояния архитектурного прототипа [19], т.е. реализует весь критический функционал на базовом уровне архитектуры. Помимо необходимой серверной
инфраструктуры реализовано два клиентских приложения: на платформах Windows (Windows Store
app) и Web (HTML + JavaScript). Дальнейшие исследования направлены в сторону интенсивного и
экстенсивного расширения модели описания представления. Доступ к ознакомительной версии системы можно получить по адресу: http://beta.obordesus.com/