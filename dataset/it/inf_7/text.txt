Нейронные сети находят активное применение в разнообразных интеллектуальных системах
для задач, решение которых классическими методами является трудоемким или даже невозможным.
Среди таких задач – обработка естественного языка, классификация и распознавание образов, предиктивный анализ и многие другие. Одним из ключевых недостатков нейронных сетей является высокая вычислительная сложность. Особенно это характерно для активно применяемых сверточных
нейронных сетей, размер которых сейчас достигает сотен миллиардов параметров [1].
Для эффективного применения нейронных сетей в маломощных автономных системах (например, сенсорные сети, мобильные сети) требуются разработка специализированных аппаратных ускорителей и тонкая адаптация применяемых алгоритмов.
Существует множество работ на тему оптимизации аппаратного и алгоритмического обеспечения систем машинного обучения для маломощных устройств. В качестве развития аппаратного обеспечения обычно предлагается замена мощных, но энергозатратных графических процессоров на более
эффективные FPGA и ASIC [2–5]. При этом осуществляется адаптация алгоритмов под особенности
конкретной архитектуры для эффективного использования вычислительных ресурсов. Зачастую также
производится компромиссное ухудшение некоторых характеристик исходной модели для уменьшения
вычислительной сложности. К примеру, в [6, 7] предлагается переход к числам меньшей точности,
а в [8, 9] – полная бинаризация сигналов. В работе [10] рассматривается уменьшение сложности сети
через устранение части внутренних связей – разряжение сети.
Данная работа посвящена аспектам построения перестраиваемых ускорителей для реализации
нейронных сетей на основе концепции перестраиваемых вычислительных сред. Данный подход открывает новые возможности для реализации нейросетевых алгоритмов, в том числе с точки зрения
повышения качественных характеристик. Одним из ключевых вопросов проектирования ускорителя
на перестраиваемых средах является реализация функций активации нейронов. В данной работе
предложен вариант реализации на перестраиваемых вычислительных средах одной из наиболее популярных функций активации – сигмоидной.
1. Динамически перестраиваемые ускорители нейронных сетей
Искусственные нейронные сети представляют собой математическую модель вычислительной
системы, имитирующей структуру и базовые принципы функционирования биологических нейронных
сетей. В классической архитектуре искусственной сети нейроны распределены в несколько слоев (рис. 1).
Каждый нейрон выполняет простую функцию: суммирует значения на всех своих входах, добавляет
к ним собственное значение смещения и применяет к результату заданную функцию активации (рис. 2).
Полученный результат передается нейронам следующего слоя, умножаясь на вес связи [11]. Функция активации нейрона – нелинейная функция одного аргумента, которая приводит взвешенную сумму входов нейрона к некоторому распределению. На практике применяются различные
функции активации в зависимости от назначения слоя и решаемой сетью задачи. В задачах классификации в нейронах скрытых слоев зачастую используется функция активации ReLU, а на выходном
слое – сигмоидная функция. Это позволяет получить на выходе сети результат в виде вероятности
принадлежности объекта целевому классу. Использование в сигмоидной функции операций деления
и возведения в произвольную степень усложняет ее реализацию, в связи с чем применяются различные способы адаптации и упрощения. В данной работе сигмоидная функция будет заменена ее кусочно-линейной аппроксимацией.
Внедрение глубоких нейронных сетей в реальные системы приводит к необходимости применения специальных вычислительных устройств. Большое количество однотипных вычислений даже
на современных центральных процессорах требует значительных затрат времени и энергии. В последние годы набирает популярность использование гибридных систем, где применяются одновременно
центральный процессор и специализированный под задачи машинного обучения сопроцессор [12].
Благодаря распределению задач между центральным процессором и сопроцессором такие системы
достаточно эффективно справляются с широким классом задач. Но при этом сохраняется проблема
узкой направленности сопроцессоров. Одним из способов устранения такого ограничения является
применение динамически перестраиваемых аппаратных ускорителей.
Отличительной особенностью динамически перестраиваемых ускорителей является способность
менять внутреннюю структуру в процессе функционирования для изменения реализуемой модели сети.
Иными словами, одно и то же вычислительное устройство в разные моменты времени может реализовывать нейронные сети принципиально разных архитектур. Это дает следующие преимущества:
– способность использовать разные архитектуры нейронных сетей без изменения аппаратной
базы;
– поддержку различных моделей сети для различных режимов функционирования (к примеру,
использование в режиме ожидания менее точной, но экономной модели);
– поддержку удаленной настройки и модификации реализуемых алгоритмов, что может быть
очень полезно, когда отсутствует априорная информация, необходимая для подготовки целевой модели сети, или когда условия функционирования изменчивы;
– возможность восстановления работоспособности устройства посредством изменения структуры вычислителя и перераспределения вычислений по неповрежденным участкам.
На данный момент разрабатываются различные подходы к построению перестраиваемых ускорителей. В [13] предлагается иерархическая «многогранульная» архитектура на основе разделяемой
нейронной сети (Bisection Neural Network), допускающая несколько уровней настройки. Работа [14]
предлагает реализацию перестраиваемости посредством выделения некоторого количества реконфигурируемых нейронов, которые могут свободно перераспределяться между скрытыми слоями сети.
В данной работе авторами предлагается построение динамически перестраиваемых ускорителей на основе концепции перестраиваемых вычислительных сред. 2. Перестраиваемые вычислительные среды
Перестраиваемые вычислительные среды (ПВС) – математическая модель широкого класса
вычислительных устройств, основанных на идее организованного совместного функционирования
большого количества однотипных, относительно простых вычислительных элементов (ВЭ), расположенных в виде регулярной решетки и попарно соединенных с соседними вычислительными элементами [15, 16]. Каждый ВЭ может быть независимо настроен при помощи внешнего управляющего
сигнала на одну операцию из некоторого предопределенного базиса. Организованное функционирование большого количества вычислителей позволяет реализовать на среде сложные алгоритмы обработки. Таким образом, вычислительные возможности перестраиваемой среды ограничиваются количеством элементов и заданным базисом операций.
В общем случае ПВС может иметь ВЭ произвольной формы и быть одно-, двух- и трехмерной.
В данной работе будут рассматриваться двумерные среды с квадратными ВЭ. Таким образом, каждый неграничный ВЭ будет соединен с четырьмя соседними элементами (рис. 3). Одной из важных задач при проектировании ускорителей является уменьшение движения данных
внутри системы в связи с сильным влиянием на быстродействие и энергопотребление. В целях снижения потока данных их стараются эффективно переиспользовать. Выделяют четыре основные стратегии переиспользования данных: фиксация весов, входов, выходов и строк [17]. При фиксации весов
каждый ВЭ хранит собственное значение веса и использует его для каждого поступающего входного
сигнала. Фиксация входов подразумевает, что каждый ВЭ хранит фрагмент входного сигнала, а значение весов поступает на вход элемента. Для фиксации выходов характерно пошаговое накопление
в каждом ВЭ его промежуточных результатов (полусумм) до получения конечного результата. В ускорителях с фиксацией строк каждый ВЭ хранит строку данных и значение веса и последовательно рассчитывает несколько промежуточных результатов посредством умножения векторов в плавающем
окне [18]. Предлагаемая нами модель ускорителя использует гибридную стратегию переиспользования
(табл. 1). При обработке входного сигнала большого размера используется фиксация весов, а в остальных сценариях переиспользование не используется. Отсутствие переиспользования компенсируется
замыканием всех вычислений внутри среды и конвейеризацией. Благодаря тому, что все вычисления
осуществляются внутри среды, отсутствует необходимость ввода / вывода промежуточных результатов, устраняются накладные расходы на обращение к внешней памяти и другим модулям. В отличие от некоторых альтернативных решений [13, 18], предлагаемая нами архитектура
ускорителя основана на принципе предельной атомарности вычислительных элементов. Это означает,
что ВЭ имеют простое строение, а базис операций включает минимально необходимое число операций.
Это позволяет добиться высокой степени гибкости среды и допускает тонкую настройку параметров
реализуемой модели. Анализ классических сетей прямого распространения позволил выделить следующий базис операций: «источник сигнала», «передача сигнала», «умножение с накоплением»,
«ReLU», «сигмоида» [20]. С их помощью каждый нейрон сети может быть представлен в виде цепочки
из нескольких ВЭ (рис. 4) [21]. Длина цепочки определяет количество входов, что позволяет создавать
нейрон любой конфигурации. Разработанная модель ВЭ оперирует 16-битными числами с фиксированной запятой. Для поддержания реализации глубоких нейронных сетей и обеспечения конвейерной обработки
в разрабатываемую вычислительную среду заложен механизм многотактной обработки сигнала посредством внутреннего зацикливания [22]. Он заключается в разбиении среды на несколько сегментов,
каждый из которых реализует один из слоев сети. Сигнал, перемещаясь по сегменту, не только проходит необходимую обработку, но и разворачивается в направлении следующего сегмента (рис. 5).
По мере движения сигнала сегменты динамически перестраиваются на реализацию последующих слоев сети. Такая архитектура позволяет реализовать на среде сеть произвольной глубины. Связанные
с многотактной обработкой потери производительности могут быть частично устранены при помощи
конвейеризации. Для четырехугольной среды с четырьмя сегментами можно на каждом такте перестраивать один сегмент, а на трех других производить обработку трех смещенных друг относительно
друга на один такт входных сигналов. Реализация многотактной обработки требует добавления в базис
операции «фиксация» для хранения промежуточного результата между сегментами среды. Функция
поворота сигнала на 90° заложена в операцию «умножение с накоплением». Другим недостатком многотактной реализации является ограничение максимально поддерживаемого размера слоя в связи с сегментированием среды. Для решения этой проблемы может быть
использован цельный режим функционирования, когда для реализации слоя сети используется вся
площадь среды. Данный режим требует применения дополнительной внешней (относительно среды)
памяти и контроллера маршрутизации входного сигнала (рис. 6). Временная симуляция нейронов, выполненных согласно обозначенным принципам, показала
приемлемые результаты временной симуляции. Однако одна из базовых операций – сигмоидная
функция активации – в изначальном виде является значительно более трудоемкой, что приводит к
большой площади каждого вычислительного элемента и их низкому быстродействию. График и математическое выражение сигмоиды (ее также называют логистической функцией)
приведены на рис. 7. Применение предложенной в [23] кусочно-линейной аппроксимации отчасти
решает проблему, но операция по-прежнему остается самой трудоемкой во всей модели ВЭ. В связи
с этим в данной работе рассматривается распределенная реализация сигмоиды на однородных средах.
3. Распределенная реализация сигмоидной функции активации
Распределенная реализация опирается на возможность независимого расчета значений на разных интервалах аппроксимации. Это позволяет распределить вычисления интервалов между разными
вычислительными элементами. Блок вычислительных элементов среды, соответствующий распределенной реализации сигмоиды, представлен на рис. 8.
Для наглядности используется цветовая дифференциация операций: зеленый – «источник сигнала», красный – «минимум двух чисел», желтый – «умножение с накоплением» (первый множитель
поступает на нижний вход элемента, второй хранится во внутренней памяти элемента, аккумулирующее значение поступает на левый вход), синий – «затвор», фиолетовый – «объединение». Как видно, для реализации распределенной сигмоиды было необходимо ввести в базис несколько новых операций – «минимум», «затвор» и «объединение». На данный момент эти операции используются только
для сигмоиды, но они могут быть переиспользованы для реализации других функций, поэтому их
введение в базис операций целесообразно.
Операция «затвор» используется для ограничения распространения сигнала в зависимости от
поступающего на вход-ключ значения. На представленной схеме вход-ключ расположен на нижней
грани элемента, а управляемый сигнал поступает на левый вход. Затвор сравнивает поступающее на
вход значение ключа и, если он совпадает с заложенным во внутреннюю память элемента значением,
пропускает входной сигнал через себя (слева направо). В противном случае на выходе элемента
(справа) будет 16-битный ноль. Значение ключа передается вверх другим элементам-затворам независимо от срабатывания текущего затвора. Таким образом, у всех затворов, чей внутренний параметр
не совпадает со поступающим значением ключа, выход будет равен нулю.
Как было показано ранее, при сравнении входного сигнала с узлами аппроксимации нас интересует только целая часть числа. В то же время операция «затвор» осуществляет сравнение ключа
целиком. Это необходимо для переиспользования операции в других задачах, где сравнения только
целой части числа может быть недостаточно. Для разрешения этого противоречия используется нижняя пара вычислительных элементов «key shift» и «объединение». Они осуществляют дополнительное смещение значения ключа – все биты дробной части (младшие 8 бит ключа) устанавливаются
равными единице.
Операция объединения заключается в применении побитового ИЛИ к входным сигналам. Она
позволяет объединить промежуточные результаты, полученные на разных интервалах аппроксимации (выходные значения элементов-затворов), в конечный результат. Также операция используется
для осуществления сдвига ключа.
Минимум используется для ограничения максимального значения ключа. В принятом алгоритме аппроксимации всем значениям аргумента свыше 5 соответствует значение функции 1. Поэтому
множество проверок узлов от 5 до 127 можно заменить ограничением ключа значением 5 и одним
сравнением с этим значением. Для значений от –128 до –5 дополнительной логики не предусмотрено,
так как на этом диапазоне значение функции равно 0, что соответствует нахождению всех затворов
в закрытом состоянии.
Таким образом, на реализацию распределенной сигмоиды требуется 48 вычислительных элементов.
4. Симуляция разработанных моделей
Для сравнения предложенной реализации сигмоидной функции была разработана модель вычислительного элемента на языке описания аппаратуры Verilog. Разработанный Verilog-модуль включает
весь описанный базис операций ВЭ. Оценивались две характеристики предложенных модулей – размер
на среде (в логических элементах, ЛЭ) и быстродействие. Полученные результаты приведены в табл. 2. Для оценки размера был осуществлен синтез модуля в среде Quartus Prime (версия 20.1.0, сборка 711 от 06.05.2020 SJ Edition) для устройства Cyclone V 5CGXFC9E7F35C8. В настройках синтеза
отключено использование DSP блоков. Для защиты всех внутренних подмодулей от удаления в процессе оптимизации применялась Verilog-директива synthesis keep.
Для анализа быстродействия использовался встроенный в среду Quartus инструмент Timing
Analyzer соответствующей версии. Симуляция происходила в режиме Fast 1000mV 0C посредством определения наибольшей задержки между входом и выходом исследуемого модуля. Оба модуля были
предварительно сконфигурированы, т.е. время перенастройки ячеек не включено в результаты измерения.
Поскольку в структуре однородных сред существуют двусторонние связи между соседними
элементами, при временной симуляции распределенной реализации Timing Analyzer обнаруживает
петли комбинационной логики. Для устранения этой проблемы на момент измерения быстродействия
распределенной реализации были отключены неиспользуемые соединения между отдельными ВЭ.
Измерение ошибки аппроксимации осуществлялось при помощи тестового приложения. Приложение берет случайное число в диапазоне аппроксимации [–5, 5], округляет его до точности 16-битного
числа, рассчитывает значение аппроксимации в этой точке и сравнивает со значением натуральной
сигмоиды для исходного неокругленного числа. Эксперимент повторяется 1е6 раз, в результате чего
определяются наибольшая и средняя абсолютные ошибки.
Результаты аналогичных исследований приведены в [24]. Как видно из табл. 2, предложенная
реализация сигмоидной функции имеет приемлемую среднюю ошибку и высокое быстродействие.
Однако распределенная реализация требует значительно большего количества логических элементов.
Это связано с распределением вычислений по большому количеству вычислительных элементов,
каждый из которых содержит логику всех базисных операций среды. Также существенную роль играет комбинационная реализация арифметических операций, что увеличивает быстродействие за счет
большей площади модулей.
Заключение
В данной работе предложен способ реализации кусочно-линейной аппроксимации сигмоиды на
однородной среде. Распределенная реализация имеет меньшую производительность и требует большего количества ВЭ, но строится из простых базовых операций, которые могут быть переиспользованы для других задач и обеспечивают меньший размер отдельного ВЭ. Эксперименты показали высокое быстродействие (18,5 нс) и приемлемую точность (наибольшая и средняя абсолютные ошибки
1e–2 и 4e–3
соответственно). Сравнение с аналогичными исследованиями показывает перспективность
дальнейшего изучения и применения разработанных моделей.
